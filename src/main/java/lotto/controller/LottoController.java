package lotto.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import lotto.domain.Budget;
import lotto.domain.LottoMachine;
import lotto.domain.LottoResult;
import lotto.domain.ManuallyChosenTicketNumbers;
import lotto.domain.Numbers;
import lotto.dto.LottoResultDto;
import lotto.domain.Number;
import lotto.dto.TicketDto;
import lotto.domain.AutoGeneratedTicketNumbers;
import lotto.domain.WinningNumbers;
import lotto.view.LottoView;

public class LottoController {
    private final LottoMachine lottoMachine;
    private final LottoView view;
    private List<Number> numberPool;

    public LottoController() {
        initNumberPool();
        this.lottoMachine = new LottoMachine(numberPool);
        this.view = new LottoView();
    }

    public void start() {
        List<Numbers> tickets = new ArrayList<>();
        Budget budget = getBudget();

        int manualQuantity = getManualQuantity(budget);
        if (manualQuantity > 0) {
            tickets.addAll(getManualTickets(manualQuantity));
            budget.payForTicket(manualQuantity);
        }

        int autoQuantity = budget.getTicketQuantity();
        tickets.addAll(creatAutoSelectedTickets(autoQuantity));
        budget.payForTicket(autoQuantity);

        lottoMachine.registerTickets(tickets);

        view.printTickets(tickets.stream()
            .map(this::NumbersToDto)
            .collect(Collectors.toList()), manualQuantity);

        LottoResultDto result = lottoResultToDto(getResult());
        view.printLottoResult(result);
    }
    private Budget getBudget() {
        try {
            int budget = view.getBudget();
            return new Budget(budget);
        } catch  (RuntimeException e) {
            view.printError(e);
        }
        return getBudget();
    }

    private int getManualQuantity(Budget budget) {
        int manualQuantity = 0;
        try {
            manualQuantity = view.getManualQuantity();
        } catch (RuntimeException e) {
            view.printError(e);
            return getManualQuantity(budget);
        }
        if (budget.checkAffordable(manualQuantity)) {
            return manualQuantity;
        }
        view.printManualQuantityUnaffordableError();
        return getManualQuantity(budget);
    }

    private List<ManuallyChosenTicketNumbers> getManualTickets(int manualTicketQuantity) {
        view.printOpeningMentionForManualNumber();
        List<ManuallyChosenTicketNumbers> manuallyChosenTicketNumbers = new ArrayList<>();
        while(manualTicketQuantity-- > 0) {
            manuallyChosenTicketNumbers.add(getSingleManualTicket());
        }
        return manuallyChosenTicketNumbers;
    }

    private ManuallyChosenTicketNumbers getSingleManualTicket() {

        try {
            List<Number> numbers = view.getNumbers()
                .stream()
                .map(Number::getNumberInstance)
                .collect(Collectors.toList());
            return new ManuallyChosenTicketNumbers(numbers);
        } catch (RuntimeException e) {
            view.printError(e);
        }
        return getSingleManualTicket();
    }

    private List<AutoGeneratedTicketNumbers> creatAutoSelectedTickets(int autoGenerateQuantity) {
        List<AutoGeneratedTicketNumbers> tickets = new ArrayList<>();
        try {
            tickets.addAll(lottoMachine.generateTickets(autoGenerateQuantity));
            return tickets;
        } catch (RuntimeException e) {
            view.printError(e);
        }
        return creatAutoSelectedTickets(autoGenerateQuantity);
    }


    private LottoResult getResult() {
        try {
            view.printOpeningMentionForPrevWeekWinNumber();
            List<Number> numbers = view.getNumbers().stream().map(Number::getNumberInstance).collect(Collectors.toList());
            Number bonusNumber = Number.getNumberInstance(view.getBonusNumber());
            LottoResult lottoResult = lottoMachine.getResult(new WinningNumbers(numbers, bonusNumber));
            return lottoResult;
        } catch (RuntimeException e) {
            view.printError(e);
        }
        return getResult();
    }

    private void initNumberPool() {
        this.numberPool = new ArrayList<>();
        for (int i = 1; i <= 45; i++) {
            numberPool.add(Number.getNumberInstance(i));
        }
    }
    public TicketDto NumbersToDto(Numbers ticketNumbers) {
        return new TicketDto(
            ticketNumbers.getNumbers().stream()
            .map(Number::toInteger)
            .collect(Collectors.toList()));
    }

    public LottoResultDto lottoResultToDto(LottoResult lottoResult) {
        return new LottoResultDto(
            lottoResult.getLottoResult(), lottoResult.getResultRate()
        );
    }
}
